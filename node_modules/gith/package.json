{
  "name": "gith",
  "description": "gith[ooks] - a simple node server that responds to github post-receive events with meaningful data",
  "version": "1.0.4",
  "homepage": "https://github.com/danheberden/gith",
  "author": {
    "name": "Dan Heberden",
    "email": "danheberden@gmail.com",
    "url": "http://danheberden.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/danheberden/gith.git"
  },
  "bugs": {
    "url": "https://github.com/danheberden/gith/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/danheberden/gith/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/gith",
  "engines": {
    "node": ">0.6.12"
  },
  "scripts": {
    "test": "./node_modules/.bin/grunt test"
  },
  "dependencies": {
    "eventemitter2": ">= 0.4.9",
    "lodash": ">= 0.3.2"
  },
  "devDependencies": {
    "grunt": "~0.3.14"
  },
  "keywords": [
    "github",
    "payload",
    "git hook",
    "post-receive"
  ],
  "readme": "# gith\n\nVersion: 1.0.4\n\ngith[ooks] - a simple node server that responds to github post-receive events with meaningful data\n\n## Getting Started\n\n### Install\n\nInstall the module with: `npm install gith`\n\n### Require\n\nIn your node application, require gith and create a gith server. You can specify a port now, or\nyou can use the `.listen( portNumber )` method later.\n\n```javascript\n// create a gith server on port 9001\nvar gith = require('gith').create( 9001 );\n```\n\n### Use\n\nPass an object of how you want to filter gith (if at all) and subscribe to an event.\n\n```javascript\ngith({\n  repo: 'danheberden/gith'\n}).on( 'all', function( payload ) {\n  console.log( 'Post-receive happened!' );\n});\n```\n\n### Hook\n\nBe sure github.com is sending payload data to your server. From your repository root\ngo to `Admin > Service Hooks > WebHook URLs` and add your server url, e.g., `http://mycoolserver.com:9001`.\n\n## Filtering\n\nThe object passed into `gith()` can utilize four parameters (`repo`, `branch`, `file` and `tag`).\nAll of these can either be an exact match string, a regular expression or a function.\n\nFor example:\n\n```javascript\ngith({\n  repo: 'danheberden/gith',\n  branch: /issue_(\\d+)/\n}).on( 'branch:add', function( payload ) {\n  console.log( 'A branch matching /issue_(\\d+)/ was added!' );\n  console.log( 'The issue # is', payload.matches.branch[1] );\n});\n```\n\nYou can either omit the key that you don't want to filter (e.g., we would get every file and tag in the above\nexample) or use `*` to specifiy that it's a wildcard.\n\n## Events\n\nEvents available are:\n\n* `all` - as long as the filtering passed, this will get fired\n* `branch:add`\n* `branch:delete`\n* `file:add`\n* `file:modify`\n* `file:delete`\n* `file:all`\n* `tag:add`\n* `tag:delete`\n\n## Payload\n\nThe github payload is very detailed, but can be a bit excessive.\n\nThis is the payload that gith gives you:\n\n```javascript\n{\n  original: the-original-github-payload,\n  files: {\n    all: [],\n    added: [],\n    deleted: [],\n    modified: []\n  },\n  tag: tag, /* if a tagging operation */\n  branch: branch, /* if working on a branch */\n  repo: the-repo-name,\n  sha: the-now-current-sha,\n  time: when-it-was-pushed,\n  urls: {\n    head: current-sha\n    branch: branch-url-if-available,\n    tag: sha-url-of-tag-if-available,\n    repo: repo-url,\n    compare: compare-url\n  },\n  reset: did-the-head-get-reset,\n  pusher: github-username-of-pusher,\n  owner: github-username-of-repo-owner\n}\n```\n\nNote that this payload will only be fully available in case of standard `push` hooks (see below for more information).\n\n## `gith()`\n\nThe gith function returns a new Gith object that has all of the [EventEmitter2](https://github.com/hij1nx/EventEmitter2)\nmethods.\n\n\n## Additional `gith` Methods\n\nOn the gith server, there are three additional methods available:\n\n#### `gith.close()`\n\nThis closes the gith server\n\n#### `gith.listen( port )`\n\nIf you didn't pass in a port to `.create()` when you required gith, this\nwill start the server on the specified port\n\n#### `gith.payload( github-style-payload )`\n\nYou can broadcast a payload to the gith server manually.\n\n\n## Using `gith` for other types of hooks\n\nWhen you use Github UI to declare a web hook, it's only attached to the `push` event.\n\nWhenever you want to attach you hook to other events, you will have to use [the API](http://developer.github.com/v3/repos/hooks/). In this case, `gith` may not be able to fully interpret the original payload, and you **should consider the *simplified payload* as unreliable**. In those cases, just use `payload.original`.\n\n\n## License\n\nCopyright (c) 2012 Dan Heberden\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "gith@1.0.4",
  "dist": {
    "shasum": "5036aa64f1a00f1ab1717b59a544b5fd2dca5202"
  },
  "_from": "gith@",
  "_resolved": "https://registry.npmjs.org/gith/-/gith-1.0.4.tgz"
}
